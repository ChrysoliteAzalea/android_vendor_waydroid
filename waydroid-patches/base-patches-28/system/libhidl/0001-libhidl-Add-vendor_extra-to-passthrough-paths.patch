From 5bcfafa8f91745d03a76649fd66695f8f5f524a2 Mon Sep 17 00:00:00 2001
From: Erfan Abdi <erfangplus@gmail.com>
Date: Sun, 11 Apr 2021 13:23:47 +0430
Subject: [PATCH] libhidl: Add vendor_extra to passthrough paths

Add support for host hals whitelist
---
 base/include/hidl/HidlInternal.h |  4 +++
 transport/Android.bp             |  1 +
 transport/ServiceManagement.cpp  | 43 ++++++++++++++++++++++++++++++--
 3 files changed, 46 insertions(+), 2 deletions(-)

diff --git a/base/include/hidl/HidlInternal.h b/base/include/hidl/HidlInternal.h
index 5a08bc3..056dd2e 100644
--- a/base/include/hidl/HidlInternal.h
+++ b/base/include/hidl/HidlInternal.h
@@ -107,21 +107,25 @@ private:
 #define HAL_LIBRARY_PATH_SYSTEM_64BIT "/system/lib64/hw/"
 #define HAL_LIBRARY_PATH_VNDK_SP_64BIT_FOR_VERSION "/system/lib64/vndk-sp%s/hw/"
 #define HAL_LIBRARY_PATH_VENDOR_64BIT "/vendor/lib64/hw/"
+#define HAL_LIBRARY_PATH_VENDOR_EXTRA_64BIT "/vendor_extra/lib64/hw/"
 #define HAL_LIBRARY_PATH_ODM_64BIT    "/odm/lib64/hw/"
 #define HAL_LIBRARY_PATH_SYSTEM_32BIT "/system/lib/hw/"
 #define HAL_LIBRARY_PATH_VNDK_SP_32BIT_FOR_VERSION "/system/lib/vndk-sp%s/hw/"
 #define HAL_LIBRARY_PATH_VENDOR_32BIT "/vendor/lib/hw/"
+#define HAL_LIBRARY_PATH_VENDOR_EXTRA_32BIT "/vendor_extra/lib/hw/"
 #define HAL_LIBRARY_PATH_ODM_32BIT    "/odm/lib/hw/"
 
 #if defined(__LP64__)
 #define HAL_LIBRARY_PATH_SYSTEM HAL_LIBRARY_PATH_SYSTEM_64BIT
 #define HAL_LIBRARY_PATH_VNDK_SP_FOR_VERSION HAL_LIBRARY_PATH_VNDK_SP_64BIT_FOR_VERSION
 #define HAL_LIBRARY_PATH_VENDOR HAL_LIBRARY_PATH_VENDOR_64BIT
+#define HAL_LIBRARY_PATH_VENDOR_EXTRA HAL_LIBRARY_PATH_VENDOR_EXTRA_64BIT
 #define HAL_LIBRARY_PATH_ODM    HAL_LIBRARY_PATH_ODM_64BIT
 #else
 #define HAL_LIBRARY_PATH_SYSTEM HAL_LIBRARY_PATH_SYSTEM_32BIT
 #define HAL_LIBRARY_PATH_VNDK_SP_FOR_VERSION HAL_LIBRARY_PATH_VNDK_SP_32BIT_FOR_VERSION
 #define HAL_LIBRARY_PATH_VENDOR HAL_LIBRARY_PATH_VENDOR_32BIT
+#define HAL_LIBRARY_PATH_VENDOR_EXTRA HAL_LIBRARY_PATH_VENDOR_EXTRA_32BIT
 #define HAL_LIBRARY_PATH_ODM    HAL_LIBRARY_PATH_ODM_32BIT
 #endif
 
diff --git a/transport/Android.bp b/transport/Android.bp
index 5b0c11c..2031771 100644
--- a/transport/Android.bp
+++ b/transport/Android.bp
@@ -37,6 +37,7 @@ cc_library {
         "libcutils",
         "libvndksupport",
     ],
+    static_libs: [ "libtinyxml2" ],
     export_shared_lib_headers: [
         "libutils",
         "libhidlbase",
diff --git a/transport/ServiceManagement.cpp b/transport/ServiceManagement.cpp
index 01f83bd..e593ce5 100644
--- a/transport/ServiceManagement.cpp
+++ b/transport/ServiceManagement.cpp
@@ -33,6 +33,7 @@
 #include <hidl/HidlTransportUtils.h>
 #include <hidl/ServiceManagement.h>
 #include <hidl/Status.h>
+#include <tinyxml2.h>
 
 #include <android-base/logging.h>
 #include <android-base/properties.h>
@@ -57,6 +58,9 @@ using android::hidl::manager::V1_0::IServiceNotification;
 using android::hidl::manager::V1_1::BpHwServiceManager;
 using android::hidl::manager::V1_1::BnHwServiceManager;
 
+using NodeType = tinyxml2::XMLElement;
+using DocType = tinyxml2::XMLDocument;
+
 namespace android {
 namespace hardware {
 
@@ -152,6 +156,24 @@ void tryShortenProcessName(const std::string& packageAndVersion) {
     }
 }
 
+static bool isHostHalAllowed(std::string ifaceName, bool* priority) {
+    DocType doc;
+    doc.LoadFile("/system/etc/hosthals.xml");
+    NodeType *titleElement = doc.FirstChildElement("hosthals");
+
+    for (NodeType *child = titleElement->FirstChildElement("hal");
+         child != nullptr;
+         child = child->NextSiblingElement("hal"))
+    {
+        if (!strcmp(ifaceName.c_str(), child->FirstChildElement("name")->GetText())) {
+            *priority = !strcmp("true", child->FirstChildElement("priority")->GetText());
+            return true;
+        }
+    }
+
+    return false;
+}
+
 namespace details {
 
 void onRegistration(const std::string &packageName,
@@ -287,6 +309,7 @@ struct PassthroughServiceManager : IServiceManager1_1 {
         const std::string& fqName,
         const std::function<bool /* continue */ (void* /* handle */, const std::string& /* lib */,
                                                  const std::string& /* sym */)>& eachLib) {
+        bool hostHalPriority = false;
         //fqName looks like android.hardware.foo@1.0::IFoo
         size_t idx = fqName.find("::");
 
@@ -298,6 +321,7 @@ struct PassthroughServiceManager : IServiceManager1_1 {
 
         std::string packageAndVersion = fqName.substr(0, idx);
         std::string ifaceName = fqName.substr(idx + strlen("::"));
+        std::string ifaceNameNoVer = fqName.substr(0, fqName.find("@"));
 
         const std::string prefix = packageAndVersion + "-impl";
         const std::string sym = "HIDL_FETCH_" + ifaceName;
@@ -307,10 +331,25 @@ struct PassthroughServiceManager : IServiceManager1_1 {
 
         dlerror(); // clear
 
+        bool isHostHal = isHostHalAllowed(ifaceNameNoVer, &hostHalPriority);
         static std::string halLibPathVndkSp = android::base::StringPrintf(
             HAL_LIBRARY_PATH_VNDK_SP_FOR_VERSION, details::getVndkVersionStr().c_str());
-        std::vector<std::string> paths = {HAL_LIBRARY_PATH_ODM, HAL_LIBRARY_PATH_VENDOR,
-                                          halLibPathVndkSp, HAL_LIBRARY_PATH_SYSTEM};
+
+        std::vector<std::string> paths;
+        paths.push_back(HAL_LIBRARY_PATH_ODM);
+        if (isHostHal) {
+            if (hostHalPriority) {
+                paths.push_back(HAL_LIBRARY_PATH_VENDOR_EXTRA);
+                paths.push_back(HAL_LIBRARY_PATH_VENDOR);
+            } else {
+                paths.push_back(HAL_LIBRARY_PATH_VENDOR);
+                paths.push_back(HAL_LIBRARY_PATH_VENDOR_EXTRA);
+            }
+        } else {
+            paths.push_back(HAL_LIBRARY_PATH_VENDOR);
+        }
+        paths.push_back(halLibPathVndkSp);
+        paths.push_back(HAL_LIBRARY_PATH_SYSTEM);
 
 #ifdef LIBHIDL_TARGET_DEBUGGABLE
         const char* env = std::getenv("TREBLE_TESTING_OVERRIDE");
-- 
2.29.2

